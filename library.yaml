openapi: 3.0.3
info:
  title: Library Management API
  description: API for managing books and authors in a library system.
  version: 1.0.0
servers:
  - url: http://localhost:3000
paths:
  /books:
    get:
      summary: List of books
      description: Retrieves a list of books with optional filtering by `bookName` and `releaseDate` range.
      parameters:
        - name: bookName
          in: query
          description: Filter books by name.
          required: false
          schema:
            type: string
        - name: startDate
          in: query
          description: Start date for the release date range filter.
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for the release date range filter.
          required: false
          schema:
            type: string
            format: date
      responses:
        "200":
          description: A list of books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    post:
      summary: Create a new book
      description: Adds a new book to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "201":
          description: The book was successfully created.
    put:
      summary: Update a book
      description: Updates the details of an existing book. This is an idempotent request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "200":
          description: The book was successfully updated.
    delete:
      summary: Delete a book
      description: Deletes a book by ID.
      parameters:
        - name: id
          in: query
          description: The ID of the book to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: The book was successfully deleted.

  /authors:
    get:
      summary: List of authors
      description: Retrieves a list of authors with optional filtering by `authorName`.
      parameters:
        - name: authorName
          in: query
          description: Filter authors by name.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A list of authors.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
    post:
      summary: Create a new author
      description: Adds a new author to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        "201":
          description: The author was successfully created.
    put:
      summary: Update an author
      description: Updates the details of an existing author. This is an idempotent request.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        "200":
          description: The author was successfully updated.
    delete:
      summary: Delete an author
      description: Deletes an author by ID.
      parameters:
        - name: id
          in: query
          description: The ID of the author to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: The author was successfully deleted.

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the book.
        bookName:
          type: string
          description: The name of the book.
        author:
          type: string
          description: The name of the author.
        pageNumbers:
          type: integer
          description: The number of pages in the book.
        topic:
          type: string
          description: The topic of the book.
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
          description: The release date of the book.
    Author:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the author.
        name:
          type: string
          description: The name of the author.
        sex:
          type: string
          description: The gender of the author.
          enum:
            - M
            - F
